import sqlite3
import os

DATABASE_FOLDER = "data"
DATABASE_NAME = os.path.join(DATABASE_FOLDER, "database.db")


def connect_db():
    """Connect to the SQLite database."""
    os.makedirs(DATABASE_FOLDER, exist_ok=True)  # data/ <- Exists
    conn = sqlite3.connect(DATABASE_NAME)
    conn.execute("PRAGMA foreign_keys = ON;")  # Support FKs
    return conn


def create_tables():
    """Create the database tables."""
    conn = connect_db()
    cursor = conn.cursor()

    # Products Table
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            description TEXT,
            price REAL NOT NULL,
            stock INTEGER NOT NULL DEFAULT 0
        );
        """
    )

    # Clients Table
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            document TEXT UNIQUE,
            address TEXT,
            phone TEXT,
            email TEXT
        );
        """
    )

    # Suppliers Table
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS suppliers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            document TEXT UNIQUE,
            address TEXT,
            phone TEXT,
            email TEXT
        );
        """
    )

    # Sales Table
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS sales (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            client_id INTEGER,
            date TEXT NOT NULL,
            total REAL NOT NULL,
            status TEXT NOT NULL DEFAULT 'Completed',
            FOREIGN KEY (client_id) REFERENCES clients(id)
        );
        """
    )  # Status ['Completed', 'Cancelled', 'Pending'] # Date [MM-DD-YYYY]

    # Sale Items Table (details each sold product from sales)
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS sale_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sale_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            quantity INTEGER NOT NULL,
            unit_price REAL NOT NULL,
            FOREIGN KEY (sale_id) REFERENCES sales(id),
            FOREIGN KEY (product_id) REFERENCES products(id)
        );
        """
    )

    # Accounts Receivable [AR] - (Generated by installment sales)
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS accounts_receivable (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sale_id INTEGER,
            client_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            due_date TEXT NOT NULL, -- Data de vencimento
            payment_date TEXT,      -- Data do pagamento, se efetuado
            status TEXT NOT NULL DEFAULT 'Pendente', -- 'Pendente', 'Pago', 'Atrasado', 'Cancelado'
            FOREIGN KEY (sale_id) REFERENCES sales(id),
            FOREIGN KEY (client_id) REFERENCES clients(id)
        );
        """
    )  # Status ['Pending', 'Paid', 'Overdue', 'Cancelled'] # Overdue / Expired

    # Accounts Payable [AP] - (Generated by suppliers / other expenses)
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS accounts_payable (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            supplier_id INTEGER,
            description TEXT NOT NULL,
            amount REAL NOT NULL,
            due_date TEXT NOT NULL,
            payment_date TEXT,
            status TEXT NOT NULL DEFAULT 'Pending',
            FOREIGN KEY (supplier_id) REFERENCES suppliers(id)
        );
        """
    )  # Status ['Pending', 'Paid', 'Overdue', 'Cancelled'] # Overdue / Expired

    conn.commit()
    conn.close()


if __name__ == "__main__":
    create_tables()
    print(f"[i] The tables already exists or were created in ({DATABASE_NAME})")
